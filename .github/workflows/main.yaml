name: CI/CD Test Suite

on:
  push:
    branches:
      - main  # Change to the branch you want to monitor for PRs, e.g., 'main', 'develop'

jobs:
  trigger-and-poll:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Trigger CI/CD Test Run
      id: trigger
      run: |
        response=$(curl -X POST "https://app.beta.api.autoflow.tools/api/v1/ci-cd/trigger/test-run/${{ secrets.BUCKET_ID }}/execute" \
        -H "CI-CD-Token: ${{ secrets.CI_CD_TOKEN }}" \
        -H "Content-Type: application/json")
        bucket_run_id=$(echo $response | jq -r '.bucketRunID')
        if [ -z "$bucket_run_id" ]; then
          echo "Failed to trigger test run"
          echo "trigger_failure=true" >> $GITHUB_ENV
        else
          echo "bucket_run_id=$bucket_run_id" >> $GITHUB_ENV
          echo "trigger_failure=false" >> $GITHUB_ENV
        fi

    - name: Poll for CI/CD Test Run Status
      id: poll
      run: |
        if [ "${{ env.trigger_failure }}" == "true" ]; then
          echo "Skipping polling due to trigger failure"
          exit 0
        fi

        bucket_run_id=${{ env.bucket_run_id }}
        status=""
        response=""
        for i in {1..30}; do
          response=$(curl -X GET "https://app.beta.api.autoflow.tools/api/v1/ci-cd/trigger/test-run/$bucket_run_id/status" \
          -H "CI-CD-Token: ${{ secrets.CI_CD_TOKEN }}" \
          -H "Content-Type: application/json")
          status=$(echo $response | jq -r '.status')
          if [[ "$status" == "PASSED" || "$status" == "FAILED" ]]; then
            break
          fi
          echo "Status: $status. Retrying in 5 seconds..."
          sleep 5
        done

        if [ "$status" != "PASSED" ]; then
          echo "Test suite run failed or did not complete in time"
          echo "poll_failure=true" >> $GITHUB_ENV
        else
          echo "poll_failure=false" >> $GITHUB_ENV
        fi

        echo "status=$status" >> $GITHUB_ENV
        echo "response=$response" >> $GITHUB_ENV
        echo $response > response.json


    - name: Send Slack Notification
      if: always()
      run: |
        if [ "${{ env.trigger_failure }}" == "true" ]; then
          message=":x: *CI/CD Test Suite Trigger Failed*"
        elif [ "${{ env.poll_failure }}" == "true" ]; then
          message=":x: *CI/CD Test Suite Polling Failed*"
        else
          response=$(cat response.json)
          status=$(echo $response | jq -r '.status')
          duration=$(echo $response | jq -r '.duration')
          journeys=$(echo $response | jq '.journeys') # Keep it as the array
          echo "Journeys data:"
          echo "$journeys"
          
          message="*CI/CD Test Suite Status:* ${status}\n"
          message+="*Total Duration:* ${duration}ms\n\n"
          message+="*Journeys:*\n"
          message+="$journeys"

        # Escape double quotes for the JSON payload
        message=${message//\"/\\\"}
        payload=$(printf '{"text": "%s"}' "$message")
        echo $payload
        curl -X POST -H 'Content-type: application/json' --data "$payload" "${{ secrets.SLACK_WEBHOOK_URL }}"




    - name: Final Job Status
      if: always()
      run: |
        if [ "${{ env.trigger_failure }}" == "true" ]; then
          echo "Job failed due to trigger failure"
          exit 1
        elif [ "${{ env.poll_failure }}" == "true" ]; then
          echo "Job failed due to poll failure"
          exit 1
        elif [ "${{ env.status }}" != "PASSED" ]; then
          echo "Job failed because test suite did not pass"
          exit 1
        elif [ "${{ env.status }}" == "FAILED" ]; then
          echo "Test suite run failed, sending notification to Slack"
          exit 1
        else
          echo "Job passed successfully"
        fi
